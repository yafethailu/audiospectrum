/**
 * ESP32 Audio Spectrum Visualizer
 * This program controls an LED matrix display to visualize audio frequencies
 * using a custom analog filter bank and shift registers for LED control.
 */

// Pin definitions for PMOS control
const int pmosDataPin = 22;    // Data pin for PMOS shift register
const int pmosResetPin = 15;   // Reset pin for PMOS shift register
const int pmosClockPin = 21;   // Clock pin for PMOS shift register (added missing definition)

// Pin definitions for NMOS control
const int nmosClockPin = 32;   // Clock pin for NMOS shift register
const int nmosDataPin = 33;    // Data pin for NMOS shift register
const int nmosResetPin = 25;   // Reset pin for NMOS shift register

// Timing configuration
const unsigned long alarmDelay = 850;  // Delay time for LED matrix refresh (in microseconds)

// Analog input pins for frequency filters
const uint8_t filterPin1 = 36;  // First frequency band input
const uint8_t filterPin2 = 39;  // Second frequency band input
const uint8_t filterPin3 = 34;  // Third frequency band input
const uint8_t filterPin4 = 35;  // Fourth frequency band input

// Matrix configuration
const uint8_t matrixSize = 8;           // Size of the LED matrix (8x8)
uint8_t matrix[matrixSize][matrixSize]; // LED matrix state array

// Filter configuration
const uint8_t numFilters = 4;                    // Number of frequency bands
const uint16_t bufferLength = 50;                // Length of sampling buffer
uint16_t filterBuffer[numFilters][bufferLength]; // Buffer for filter readings
uint16_t filterMean[numFilters];                 // Average values for each filter
const uint8_t filterPins[numFilters] = {
    filterPin1, filterPin2, filterPin3, filterPin4
};
const float filterScalers[numFilters] = {175, 175, 175, 175}; // Scaling factors for visualization

// Animation control
volatile bool animationRunning = false;
hw_timer_t *animationTimer = NULL;

/**
 * Resets both shift registers to clear the LED matrix
 */
void resetMatrix() {
    // Set all PMOS bits high
    shiftOneBitPMOS(1);
    shiftOneBitPMOS(1);
    shiftOneBitPMOS(1);
    
    // Reset PMOS register
    digitalWrite(pmosResetPin, HIGH);
    digitalWrite(pmosResetPin, LOW);
    
    // Reset NMOS register
    digitalWrite(nmosResetPin, HIGH);
    digitalWrite(nmosResetPin, LOW);
}

/**
 * Shifts one bit into the PMOS shift register
 * @param data Bit to shift (0 or 1)
 */
void shiftOneBitPMOS(uint8_t data) {
    digitalWrite(pmosDataPin, data);
    digitalWrite(pmosClockPin, HIGH);
    digitalWrite(pmosClockPin, LOW);
    digitalWrite(pmosDataPin, LOW);
}

/**
 * Shifts one bit into the NMOS shift register
 * @param data Bit to shift (0 or 1)
 */
void shiftOneBitNMOS(uint8_t data) {
    digitalWrite(nmosDataPin, data);
    digitalWrite(nmosClockPin, HIGH);
    digitalWrite(nmosClockPin, LOW);
    digitalWrite(nmosDataPin, LOW);
}

/**
 * Timer interrupt handler for matrix animation
 * Updates one row of the LED matrix per interrupt
 */
void IRAM_ATTR animationHandler() {
    if (!animationRunning) {
        animationRunning = true;
        resetMatrix();
        
        static uint8_t currentRow = 0;
        
        // Set up PMOS register for current row
        shiftOneBitPMOS(0);
        if (currentRow == 1) {
            shiftOneBitPMOS(1);
        }
        if (currentRow == 2) {
            shiftOneBitPMOS(1);
            shiftOneBitPMOS(1);
        }
        
        // Shift out column data for current row
        for (int col = 0; col < 8; col++) {
            shiftOneBitNMOS(matrix[currentRow][7 - col]);
        }
        
        currentRow = (currentRow + 1) % 8;
        animationRunning = false;
    }
}

/**
 * Updates the LED matrix state array based on column heights
 * @param cols Array of column heights
 * @param numRows Number of rows in the matrix
 * @param numCols Number of columns in the matrix
 */
void updateMatrix(uint8_t *cols, uint8_t numRows, uint8_t numCols) {
    resetMatrix();
    
    int8_t colsInverse[3] = {0, 0, 0};
    
    // Calculate inverse column heights
    for (uint8_t i = 0; i < numCols; i++) {
        colsInverse[i] = numRows - cols[i];
    }
    
    // Update matrix state array
    for (int8_t i = 0; i < numRows; i++) {
        for (int8_t j = 0; j < numCols; j++) {
            matrix[i][j] = (colsInverse[j] > 0) ? 0 : 1;
            colsInverse[j]--;
        }
    }
}

/**
 * Calculates the mean value of a buffer
 * @param buffer Array of values
 * @param length Length of the array
 * @return Mean value
 */
uint16_t calculateBufferMean(uint16_t *buffer, uint16_t length) {
    uint32_t average = 0;
    for (size_t i = 0; i < length; i++) {
        average += buffer[i];
    }
    return average / length;
}

/**
 * Initial setup function
 */
void setup() {
    Serial.begin(115200);
    
    // Configure input pins for filters
    pinMode(filterPin1, INPUT);
    pinMode(filterPin2, INPUT);
    pinMode(filterPin3, INPUT);
    pinMode(filterPin4, INPUT);
    
    // Configure output pins for shift registers
    pinMode(pmosClockPin, OUTPUT);
    pinMode(pmosDataPin, OUTPUT);
    pinMode(pmosResetPin, OUTPUT);
    pinMode(nmosClockPin, OUTPUT);
    pinMode(nmosDataPin, OUTPUT);
    pinMode(nmosResetPin, OUTPUT);
    
    resetMatrix();
    
    // Configure animation timer
    animationTimer = timerBegin(1, 80, true);
    timerAttachInterrupt(animationTimer, &animationHandler, true);
    timerAlarmWrite(animationTimer, alarmDelay, true);
    timerAlarmEnable(animationTimer);  // Fixed missing parameter
}

/**
 * Main program loop
 */
void loop() {
    static uint8_t cols[matrixSize];
    static uint16_t counter = 0;  // Counter for circular buffer
    
    // Read values from all filters
    for (uint8_t ii = 0; ii < numFilters; ii++) {
        filterBuffer[ii][counter] = analogRead(filterPins[ii]);
    }
    
    // Update circular buffer counter
    counter = (counter < bufferLength - 1) ? counter + 1 : 0;
    
    // Calculate mean values for each filter
    for (uint8_t i = 0; i < numFilters; i++) {
        filterMean[i] = calculateBufferMean(filterBuffer[i], bufferLength);
    }
    
    // Update column heights based on filter means
    for (uint8_t ii = 0; ii < numFilters; ii++) {
        cols[2*ii] = round((float)matrixSize * ((float)filterMean[ii] / filterScalers[ii]));
        cols[2*ii+1] = cols[2*ii];  // Duplicate column for smoother display
    }
    
    // Update matrix display
    updateMatrix(cols, matrixSize, matrixSize);
    
    // Print debug information
    Serial.printf("%4d", filterMean[0]);
    for(uint8_t ii = 1; ii < numFilters; ii++) {
        Serial.printf(",%4d", filterMean[ii]);
    }
    Serial.printf("\r\n");
}
